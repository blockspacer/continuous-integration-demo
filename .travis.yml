language: cpp
sudo: required

branches:
  only: 
    - master

#os:
#    - linux

#compiler:
#    - clang
#    - g++-6

## env:
##    - TARGET_CPU=x64 BUILD_CONFIGURATION=Debug
##    - TARGET_CPU=x64 BUILD_CONFIGURATION=Release

matrix:
  include:
    # clang 5 C++11/14/1z Debug/Release-ASAN libc++, 11 Debug libstdc++
    - env: CLANG_VERSION=5.0 BUILD_TYPE=Debug CPP=11 ASAN=On LIBCXX=On CLANG_MODULES=Off BOOST=Off
      os: linux
      addons: &clang5
        apt:
          packages:
            - util-linux
            - clang-5.0
            - g++-6
            - valgrind
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty


    # gcc-6 C++11/14/1z Debug/Release
    - env: GCC_VERSION=6 BUILD_TYPE=Debug CPP=11 ASAN=On LIBCXX=Off BOOST=Off
      os: linux
      addons: &gcc6
        apt:
          packages:
            - g++-6
            - valgrind
          sources:
            - ubuntu-toolchain-r-test


install:
    - if [[ -n "$CLANG_VERSION" ]]; then export CXX=clang++-$CLANG_VERSION CC=clang-$CLANG_VERSION; fi
    - if [[ -n "$GCC_VERSION" ]]; then export CXX=g++-$GCC_VERSION CC=gcc-$GCC_VERSION; fi
    - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
    - mkdir -p "${DEPS_DIR}" && cd "${DEPS_DIR}"
    ############################################################################
    # [linux]: Install the right version of libc++
    ############################################################################
    - |
        if [[ -n "$CLANG_VERSION" && "${TRAVIS_OS_NAME}" == "linux" && "${STDLIB}" != "libstdc++" ]]; then
        if [[ "$CLANG_VERSION" == "3.5" ]]; then LLVM_VERSION="3.5.2"; fi
        if [[ "$CLANG_VERSION" == "3.6" ]]; then LLVM_VERSION="3.6.2"; fi
        if [[ "$CLANG_VERSION" == "3.7" ]]; then LLVM_VERSION="3.7.1"; fi
        if [[ "$CLANG_VERSION" == "3.8" ]]; then LLVM_VERSION="3.8.1"; fi
        if [[ "$CLANG_VERSION" == "3.9" ]]; then LLVM_VERSION="3.9.1"; fi
        LLVM_ROOT="${DEPS_DIR}/llvm-${LLVM_VERSION}"
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        if [[ -z "$(ls -A ${LLVM_ROOT}/install/include)" ]]; then
            mkdir -p "${LLVM_ROOT}" "${LLVM_ROOT}/build" "${LLVM_ROOT}/projects/libcxx" "${LLVM_ROOT}/projects/libcxxabi"
            travis_retry wget --quiet -O - "${LLVM_URL}" | tar --strip-components=1 -xJ -C "${LLVM_ROOT}"
            travis_retry wget --quiet -O - "${LIBCXX_URL}" | tar --strip-components=1 -xJ -C "${LLVM_ROOT}/projects/libcxx"
            travis_retry wget --quiet -O - "${LIBCXXABI_URL}" | tar --strip-components=1 -xJ -C "${LLVM_ROOT}/projects/libcxxabi"
            (cd "${LLVM_ROOT}/build" && cmake .. -DCMAKE_CXX_COMPILER="$CXX" -DCMAKE_C_COMPILER="$CC" -DCMAKE_INSTALL_PREFIX="${LLVM_ROOT}/install" -DCMAKE_BUILD_TYPE=$BUILD_TYPE)
            (cd "${LLVM_ROOT}/build/projects/libcxx" && make install -j$JOBS)
            (cd "${LLVM_ROOT}/build/projects/libcxxabi" && make install -j$JOBS)
        fi
        export CXXFLAGS="-I ${LLVM_ROOT}/install/include/c++/v1"
        export LDFLAGS="-L ${LLVM_ROOT}/install/lib -lc++ -lc++abi"
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_ROOT}/install/lib"
        fi
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
    - make

before_script:
    - cd "${TRAVIS_BUILD_DIR}"
    - cmake . -Bbuild -DCMAKE_CXX_COMPILER="$CXX" -DCMAKE_C_COMPILER="$CC" -DCMAKE_BUILD_TYPE=$BUILD_TYPE
    - cmake --build build -- -j$JOBS

script:
    - cd build
    - ctest --output-on-failure -j$JOBS

notifications:
    email: false